module java/pp2py/literal

rules

  java2py-to-box: True()      -> box |[ "True" ]|
  java2py-to-box: False()     -> box |[ "False" ]|
  java2py-to-box: Null()      -> box |[ "None" ]|
  java2py-to-box: VoidClass() -> H hs=0 [KW["void"] "." KW["class"]]
  java2py-to-box: Class(type) -> H hs=0 [~type ".__class__"]

  java2py-to-box: Bool(b)  -> b
  java2py-to-box: Char(c)  -> box |[ H hs=0 ["'" ~c "'"] ]|

  java2py-to-box: Single(c) -> box |[ s ]|
    where <implode-string> [c] => s

rules

  java2py-to-box:
    NamedEscape(c) -> box |[ s ]|
      where <implode-string> ['\', c] => s

  java2py-to-box:
    UnicodeEscape(us, c1, c2, c3, c4) -> box |[ s ]|
      where <implode-string> ['\' | <conc> (us, [c1, c2, c3, c4])] => s

  java2py-to-box:
    OctaEscape1(c1) -> box |[ s ]|
      where <implode-string> ['\', c1] => s

  java2py-to-box:
    OctaEscape2(c1, c2) -> box |[ s ]|
      where <implode-string> ['\', c1, c2] => s

  java2py-to-box:
    OctaEscape3(c1, c2, c3) -> box |[ s ]|
      where <implode-string> ['\', c1, c2, c3] => s

rules

  java2py-to-box: String(parts) -> box |[ H hs=0 ["u\"" ~*parts "\""] ]|
  java2py-to-box: Chars(s) -> box |[ s ]|

rules

  java2py-to-box: Float(f)  -> box |[ NUM[ ~S(f) ] ]|
  java2py-to-box: Deci(d)   -> box |[ NUM[ ~S(d) ] ]|
  java2py-to-box: Hexa(h)   -> box |[ NUM[ ~S(h) ] ]|
  java2py-to-box: Octa(o)   -> box |[ NUM[ ~S(o) ] ]|

/*
strategies

  is-double-quote = 
    is-quote(?34)

  is-quote(c) =
    where( explode-string; ?[<c> | <last; c>] )

*/

