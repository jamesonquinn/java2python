module pp2py/main
imports
  libstratego-lib
  libstratego-gpp
  java/signature/v5
  java/signature/eblock
  
  pp2py/helpers
  pp2py/statement
  pp2py/expression
  pp2py/literal
  pp2py/name
  pp2py/modifier

  pp2py/type/parameterized
  pp2py/type/variable
  pp2py/type/primitive
  pp2py/type/reference

  pp2py/class/enum-declaration
  pp2py/class/method-declaration

  pp2py/interface/annotation
  pp2py/interface/annotation-type
  
  java/pp/parenthesize


strategies

  /**
   * @type Java -> String
   */
  pp-java52py-to-string =
    pp-java52py-to-abox
    ; box2text-string(|800)

  /**
   * @type Java -> Box
   */
  pp-java52py-to-abox =
    pp-java52py-to-abox(fail)
    
  /**
   *  @param extension  Strategy that converts an aterm to an abox,
   *                    overriding the default pretty printing rules.
   */
  pp-java52py-to-abox(extension) =    
    parenthesize-Java5
    ; bottomup(try(j2py))
    ; topdown(
        try(very-special-conflict)
        ; try(pp-comments(extension <+ java2py-to-box))
        ; repeat(j2py <+ extension <+ java2py-to-box)
      )
    //; where(<debug> [ "//////////////////", <id> ])  

rules
 
  j2py: ExprStm(PreIncr(e))  -> H hs=1 [ ~e "+= 1"]
  j2py: ExprStm(PreDecr(e))  -> H hs=1 [ ~e "-= 1"]
  j2py: ExprStm(PostIncr(e)) -> H hs=1 [ ~e "+= 1"]
  j2py: ExprStm(PostDecr(e)) -> H hs=1 [ ~e "-= 1"]
  j2py: For( 
          LocalVarDec([],Int(),[VarDec(e, e1)]),
          Some(Lt(ExprName(e), e2)),
          [PostIncr(ExprName(e))],
          body) -> V [ H hs=0 ["for " ~e " in range(" ~e1 "," ~e2 "):"] ~body]

  j2py:
    ClassOrInterfaceType(TypeName(Id("Object")), None())
      -> ClassOrInterfaceType(TypeName(Id("java.Object")), None())
      
  j2py:
    SuperDec(ClassType(TypeName(Id("Object")), None()))
      -> SuperDec(ClassType(TypeName(Id("java.Object")), None()))  

rules

  very-special-conflict:
    Minus(Minus(e)) -> Minus(Parenthetical(Minus(e)))

  very-special-conflict:
    Plus(Plus(e)) -> Plus(Parenthetical(Plus(e)))

rules

  pp-comments(pprules) =
    ?t{a*}

    ; where(
        <fetch(?(Comment(_), s))> a*
      ; <pprules> t => b
      )

    ; if !b => V(_, _) then // block comments
        !|[ V vs=0 [s b] ]|
      else
        if <explode-string> s => cs@['/', '/' | _] then
          <trim(?'\n' + ?'\r' + ?' ' + ?'\t'); implode-string> cs => s1
          ; !|[ V vs=0 [b s1] ]|
        else // inline comments
          !|[ H hs=1 [b s] ]|
        end
      end
 
rules

  // TODO: This could probably be written much nicer; learn stratego ....
  java2py-to-box:
    Verbatim(None(),e,None()) ->  box |[ V [ ~e ] ]|

  java2py-to-box:
    Verbatim(None(),e,s2) ->  box |[ V [ ~e s2 ] ]|

  java2py-to-box:
    Verbatim(s1,e,None()) ->  box |[ V [ s1 ~e ] ]|

  java2py-to-box:
    Verbatim(s1,e,s2) ->  box |[ V [ s1 ~e s2 ] ]|
    
  java2py-to-box:
    Verbatim(e) ->  box |[ V [ ~*e ] ]|

/*
  // TODO: how to have a list of strings, or a string automatically split at \n in Verbatim ?

  java2py-to-box:
    Verbatim(s) ->  box |[ V [ s2 ] ]|
    where <get-lines> s => s2*

  java2py-to-box:
    Verbatim(s) ->  box |[ V [ s ] ]|
*/

  java2py-to-box:
    CompilationUnit(Some(package), imports, types) -> box |[ V vs=1 [~package V vs=0 [ ~*imports ] V vs=1 [ ~*types ]] ]|

  java2py-to-box:
    CompilationUnit(None(), imports, types) -> box |[ V vs=1 [V vs=0 [~*imports] V vs=1 [~*types]] ]|

  java2py-to-box:
    PackageDec(annos, name) -> V hs=0 [  H ["#" ~*annos KW["package"] H hs=0 [~name ]]]

rules

  java2py-to-box:
    TypeImportDec(TypeName(pname,Id(s))) -> H hs=0 [ "from " ~pname "." s  " import " s ]

  java2py-to-box:
    TypeImportOnDemandDec(pname) -> H hs=1 ["from " ~pname "import *"] 

  java2py-to-box:
    StaticImportDec(tname, Id(s)) -> H hs=0 ["from " ~tname "." s " import " s ] 

  java2py-to-box:
    StaticImportOnDemandDec(tname)  -> H hs=1 ["from" ~tname "import *" ] 

rules

  java2py-to-box:
    Semicolon() -> None() // box |[ ";" ]|

  java2py-to-box:
    InterfaceDec(InterfaceDecHead(mods, Id(name), type-args, implements), body)
      ->
    V vs=0 [
      ~mods 
      H hs=0 ["class " ~lit:name b* " #interface"] 
      b2 
      ""
    ]
    where
      <type-params-to-boxes> type-args => b*
    ; <block-structure> (1, body) => b2

  java2py-to-box:
    ClassDec(ClassDecHead(mods, Id(name), type-args, extends, implements), body)
      ->
    V vs=0 [
      ~*mods
      H hs=1 ["class" H hs=0 [~lit:name b* "(" ~extends "):"]]
      "" 
      ~body
      ""
    ]
    where
      <type-params-to-boxes> type-args => b*

  java2py-to-box:
    ClassBody(decs) -> <block-structure> (1, decs)

  java2py-to-box:
    None() -> box |[ H hs=0 [""] ]|

  java2py-to-box:
    Some(c) -> c

  java2py-to-box:
    SuperDec(c) -> box |[ H hs=1 ["(" ~c ")"] ]|

  java2py-to-box:
    ImplementsDec(is) -> box |[ H hs=1 [KW["implements"] ~interfaces] ]|
      where <separate-by-comma> is; ?interfaces

  java2py-to-box:
    ExtendsInterfaces(is) -> box |[ H hs=1 ["(" ~interfaces ")"] ]|
      where <separate-by-comma> is; ?interfaces

rules

  java2py-to-box:
    StaticInit(b)   -> box |[ V vs=0  [~b] ]|

  java2py-to-box:
    InstanceInit(b) -> box |[ V vs=1 [ "##InstanceInit" b ] ]|

rules

  java2py-to-box:
    AbstractMethodDec(mods, type-params, type, Id(n), params, throws)
      ->
    box |[ H hs=0 [ ~MethodDecHead(mods, type-params, type, Id(n), params, throws) ] ]|

  java2py-to-box:
    ConstrDec(ConstrDecHead(mods, type-params, class, params, throws), body)
      ->
    V vs=0 [
      ~*mods
      H hs=0 ["def __init__" ~targboxes "(self, " ~args "):"]
      ~body 
      ""
    ]
    where 
      <list-to-args2> params => args 
    ; <type-params-to-boxes> type-params => targboxes 
    ; !Conc(mods, targboxes) => foo 

  java2py-to-box:
    ConstrBody(None(), stms) -> <block-structure> (0, stms)

  java2py-to-box:
    ConstrBody(Some(cinvoke), stms) -> <block-structure> (0, [cinvoke | stms])

  java2py-to-box:
    FieldDec(mods, type, ds) -> V [ ~ds ] 
 
/* TODO: init static attrs
  java2py-to-box:
    FieldDec(mods, type, ds)
      ->
    H hs=1 [ H hs=0 ["self." ~decs ] ] 
    where
      <separate-by-comma> ds => decs

*/

  java2py-to-box:
    ConstantDec(mods, type, ds) -> FieldDec(mods, type, ds)

  java2py-to-box:
    VarDec(i) -> H hs=1 [~i "= None" ]

  java2py-to-box:
    VarDec(i, init) -> H hs=1 [~i "=" ~init]

  java2py-to-box:
    Id(s) -> box |[ s ]|

  java2py-to-box:
    ArrayVarDecId(Id(s), b*) -> H hs=0 [s b*]

  java2py-to-box:
    Dim() -> H hs=0 [ "" ]

  java2py-to-box:
    Dim(e) -> H hs=0 [ "range(" ~e ")" ]

  java2py-to-box:
    ArrayInit(exprs) -> H hs=0 ["java.Array([" ~vals "])"]
    where
      <separate-by-comma> exprs => vals

  java2py-to-box:
    AltConstrInv(type-args, exprs) 
      -> H hs=0 [ "self" ~args " ##AltConstrInv" ]
    where
      <list-to-args> exprs => args
    ; <type-args-to-boxes> type-args => b1*

  java2py-to-box:
    SuperConstrInv(type-args, exprs) 
      -> box |[ H hs=0 [ "self.__bases__[0].__init__" b2 /* "##SuperConstrInv" */] ]|
    where
      <list-to-args3> exprs => b2
    ; <type-args-to-boxes> type-args => b1*

  java2py-to-box:
    QSuperConstrInv(b0, type-args, exprs) 
      -> box |[ H hs=0 [ "self.__bases__[0].__init__" b2 /* "##QSuerConstrInv" */ ] ]|
    where
      <list-to-args3> exprs => b2
    ; <type-args-to-boxes> type-args => b1*

  java2py-to-box :
    amb(alts) -> V vs=0[V vs=0 is=2 [ "##amb>" ~*alts' ] "##<amb"]
    where
      <map-with-index({s: \
         (i, b) -> H hs=1 [ H hs=0 [s ">"] b]
         where
           <int-to-string> i => s
       \})> alts => alts'

  java2py-to-box :
    PreEBlock(stms, e) -> V vs=0 [ "##PreEBlock" V is=2 ["|" ~*stms] H hs=1 ["|" ~e "|"]]

signature
  constructors
    Comment   : String -> AnnoKey
    amb       : List(A) -> A

    /**
     * Construct from Dryad. Dirty, but useful to have here.
     */
    Field     : Id -> Expr
    Verbatim  : Unknown -> Unknown
    Verbatim  : Unknown * Unknown * Unknown  -> Unknown
