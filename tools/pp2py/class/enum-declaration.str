module java/pp2py/class/enum-declaration
rules

  java2py-to-box:
    EnumDec(head, body)
      ->
    box |[
      V hs=0 [
        ~head1
        ~body1
      ]
    ]|
    where
      <java2py-to-box> head => head1
      ; <java2py-to-box> body => body1

  java2py-to-box:
    EnumDecHead(mods, Id(name), implements)
      ->
    box |[
      V [
        ""
        "@java.enum"
        ~*mods
        H hs=0 ["class "  ~lit:name "(java.Enum):" /* ~implements */]
      ]
    ]|

/*

  java2py-to-box:
    EnumBody(consts, body) -> <j2py-block-structure> (1, [ |[
      V [
        ""
        H hs = 0 ["init = [" ~consts2 "]" ]
      ]
    ]| , body2])
    where
      <separate-by-comma> consts => consts2
    ; (!body => None() < ![] +  ![body]) => body2

*/

  java2py-to-box:
    EnumBody(consts, body ) -> <j2py-block-structure> (1, [ |[
      V [
        ""
        H hs = 0 ["init = [" ~consts2 "]" ]
      ]
    ]| , None() ])
    where
      <separate-by-comma> consts => consts2
    ; !body => Some(EnumBodyDecs([]))


  java2py-to-box:
    EnumBody(consts, body ) -> <j2py-block-structure> (1, [ |[
      V [
        ""
        H hs = 0 ["init = [" ~consts2 "]" ]
      ]
    ]| , body2])
    where
      <separate-by-comma> consts => consts2
    ; (!body => None() < ![] +  ![body]) => body2
    ; not (!body => Some(EnumBodyDecs([])))

  java2py-to-box:
    EnumConst(Id(s), None(), None()) -> box |[ H hs=0 [ "\"" s "\"" ] ]|

  java2py-to-box:
    EnumConst(Id(s), Some(args), None()) -> box |[ H hs=0 [ "(\"" s "\"," ~args' ")"] ]|
    where
      <list-to-args> args => args'

  java2py-to-box:
    EnumConst(Id(s), args, Some(body)) -> box |[ V vs=0 [ ~enum  "#body" ~body] ]|
    where
      !EnumConst(Id(s), args, None()) => enum

  java2py-to-box:
   EnumBodyDecs(decs) ->
     box |[ V vs=1 [
       ""
       "class EnumItem(java.EnumItem):"
       H hs=0 [ "    " V [ ~*decs ] ]
     ] ]|
