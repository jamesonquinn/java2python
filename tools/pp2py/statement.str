module java/pp2py/statement
rules

  stm-box:
    x -> box |[ H hs=0 [~x ] ]|

/*
  j2py:
    Block([]) -> Block([Pass(None())])
*/

  java2py-to-box:
    Block(stms) -> <block-structure> (0, stms)

  java2py-to-box:
    Block2(stms) -> V [ ~*stms ]

  java2py-to-box:
    ClassDecStm(classdec) -> classdec

  java2py-to-box: Return(None())  -> <stm-box> box |[  KW["return"] ]|
  java2py-to-box: Return(Some(e)) -> <stm-box> box |[ H hs=1 [KW["return"] ~e] ]|

  java2py-to-box:
    ExprStm(e) -> <stm-box> e

  java2py-to-box:
    Empty()  -> box |[ V ["pass ##Empty"] ]|

rules

  java2py-to-box :
    LocalVarDecStm(lvardec) -> H hs=0 [b]
      where <LocalVarDec-to-box> lvardec => b

  LocalVarDec-to-box :
    LocalVarDec(mods, type, ds) -> V [~*ds]
    // where <separate-by-comma> ds => decs

rules

  java2py-to-box:
    Try(block, catches) -> V vs=0 ["try:" ~block ~*catches]

  java2py-to-box:
    Try(block, catches, finally)
      ->
    V vs=0 [KW["try:"] ~block ~*catches "finally:" ~finally]

  java2py-to-box:
    Catch(param, block)
      ->
     V vs=0 [H hs=0 ["except Exception," ~param ":"] ~block]

  java2py-to-box:
    Throw(e) -> H hs=1 ["raise" H hs=0[~e ]]

/**
 * if and if-else
 */
rules

  java2py-to-box =
    ?If(_, _)
    ; if-then-to-box

  java2py-to-box:
    If(b1, b2, b3) -> V vs=0 [b4 b5]
    where
       not ( !b3 => If(_,_,_) ) ;
        <if-then-to-box> If(b1, b2) => b4
      ; <if-else-to-box> If(b1, b2, b3) => b5

  java2py-to-box:
    If(b1, b2, b3) -> V vs=0 [b4 b5]
    where
        ( !b3 => If(_,_,_) ) ;
        <if-then-to-box> If(b1, b2) => b4
      ; <elif-to-box> If(b1, b2, b3) => b5

  if-then-to-box :
    If(b1, b2) -> V is=2 vs=0 [H hs=0 ["if " b1 ":"] b2]
    where
      not(!b2 => Block(_))

  if-then-to-box :
    If(b1, b2) -> V vs=0 [H hs=0 ["if " b1 ":"] b2]
    where
      !b2 => Block(_)

  if-else-to-box :
    If(b1, b2, b3) -> V is=2 vs=0 [KW["else:"] b3]
    where
      not(!b3 => Block(_))

  if-else-to-box :
    If(b1, b2, b3) -> V vs=0 [KW["else:"] b3]
    where
      !b3 => Block(_)


  elif-to-box:
    If(b1, b2, b3) -> V vs=0 [b4 b5]
    where
       not ( !b3 => If(_,_,_) ) ;
        <elif-then-to-box> If(b1, b2) => b4
      ; <if-else-to-box> If(b1, b2, b3) => b5

  elif-to-box:
    If(b1, b2, b3) -> V vs=0 [b4 b5]
    where
        ( !b3 => If(_,_,_) ) ;
        <elif-then-to-box> If(b1, b2) => b4
      ; <elif-to-box> b3 => b5

  elif-then-to-box :
    If(b1, b2) -> V is=2 vs=0 [H hs=0 ["elif " b1 ":"] b2]
    where
      not(!b2 => Block(_))

  elif-then-to-box :
    If(b1, b2) -> V vs=0 [H hs=0 ["elif " b1 ":"] b2]
    where
      !b2 => Block(_)


/**
 * While Statements
 */
rules

  java2py-to-box:
    While(cond, b) -> V vs=0 [H hs=0 ["while " ~cond ":"] ~b]

  java2py-to-box:
    DoWhile(b, cond) -> 
      V vs=0 [
        "while True:" 
        V vs=0 [
          ~b 
          H hs=0 ["    if not (" ~cond "):"] 
          "        break"
        ]
      ]

/**
 * For Statements
 */
rules

  java2py-to-box:
    f@For(init, cond, update, b2) -> box |[ V is=2 vs=0 [b1 b2] ]|
    where
      <for-head> f => b1
      ; not(!b2 => Block(_))

  java2py-to-box:
    f@For(init, cond, update, b2) -> box |[ V vs=0 [b1 b2] ]|
    where
      <for-head> f => b1
      ; !b2 => Block(_)

  for-head :
    For(init, cond, update, body)
      ->
    V [  
        ~binit
        H hs=0 [
          "while " ~*bcond ":"
        ]
        H hs=1 ["    " ~bupdate]  
    ]
    
    where
      <separate-by-comma> update => bupdate

      ; < LocalVarDec-to-box; ![<id>]
          <+ is-list; separate-by-comma
        > init => binit

      ; < ?Some(<id>); ![<id>]
          <+ ?None(); ![]
        > cond => bcond

/**
 * For Each Statements
 */
rules

  java2py-to-box:
    f@ForEach(param, source, b2) -> box |[ V is=2 vs=0 [b1 b2] ]|
    where
      <for-each-head> f => b1
      ; not(!b2 => Block(_))

  java2py-to-box:
    f@ForEach(param, source, b2) -> box |[ V vs=0 [b1 b2] ]|
    where
      <for-each-head> f => b1
      ; !b2 => Block(_)

  for-each-head :
    ForEach(param, source, body)
      ->
    H hs=1 [
      H hs=0 ["for " ~param " in " ~source ":"]
    ]

rules

  java2py-to-box:
    Pass(None()) -> H hs=0 [KW["pass"] ]

  java2py-to-box:
    Synchronized(e, b) -> box |[ V vs=0 [H hs=0 ["with java.synchronize(" ~e "):"] ~b] ]|

  java2py-to-box:
    Break(Some(Id(s))) -> H hs=0 [H hs=1 ["break"  "###NOTIMPL LABEL" s] ]

  java2py-to-box:
    Break(None()) -> H hs=0 [KW["break"] ]

  java2py-to-box:
    Continue(Some(Id(s))) -> H hs=0 [H hs=1 ["continue" "###NOTIMPL LABEL" s] ]

  java2py-to-box:
    Continue(None())      -> H hs=0 [KW["continue"] ]

  java2py-to-box:
    Labeled(Id(s), stm) -> box |[ V [ H hs=0 [ "#LABELED" s ":" ] ~stm] ]| 

/*
  java2py-to-box:
    AssertStm(e) -> box |[ H hs=0 [ "if not " ~e ": raise AssertionError" ] ]| 

  java2py-to-box:
    AssertStm(e1, e2) -> H hs=0 [ "if not " ~e1 ": raise AssertionError, " ~e2 ]
*/

  java2py-to-box:
    AssertStm(e) -> box |[ H hs=0 [ "assert " ~e ] ]| 

  java2py-to-box:
    AssertStm(e1, e2) -> H hs=0 [ "assert " ~e1 ", " ~e2 ]

  java2py-to-box:
    Switch(b1, b2) -> V vs=0 [H hs=0 ["for _switch in ["  b1 "]:"] b2]

  java2py-to-box:
    SwitchBlock(groups, labels) ->
      <block-structure> (1, <conc> (groups, labels))


  java2py-to-box:
    SwitchGroup([Default()], stms) 
      -> 
     V is=4 vs=0 [ H hs=1 ["if True:"] ~*stms ]

  java2py-to-box:
    SwitchGroup(labels, stms) 
      -> 
     V is=4 vs=0 [ H hs=0 ["if _switch in [" ~params "]:"] ~*stms ]
     where
       <list-to-args2> labels => params
      

  java2py-to-box:
    Case(e) -> H hs=0 [~e]

/*
  java2py-to-box:
    Default() -> H hs=0 ["if True: ##default"]
*/


signature
  constructors
    Pass: Unknown -> Unknown
    Block2 : Unknown -> Unknown // TODO could get a nicer name
    
